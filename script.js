let sampleText = "sun apple dream book cloud run forest idea moon world smart hope dance fire chill light sound smile tiger bright magic ghost rock happy plan flash open rain king power move time box blue night quick dark slow gold cat jump heart clean green storm love trust trick sweet leaf";
let sampleWords = []; // –º–∞—Å—Å–∏–≤ —Å–ª–æ–≤
const placeholder = "\u200B";  // zero-width space

let gameEnded = false;
let currentIndex = 0;
let timerStarted = false;
let remainingTime = 30;
let timerInterval = null;
let incorrectCount = 0;
let startTime = null;
let endTime = null;

let gameMode = "time";          // —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
let timeOptions = [15, 30, 60, 120];
let wordOptions = [10, 25, 50, 100];
let defaultTime = 30;
let wordCount = 25;

const textContainer = document.getElementById("text");
const timerDisplay = document.getElementById("timer");
const hiddenInput = document.getElementById("hiddenInput");

function setCaretToEnd(el) {
  const range = document.createRange();
  range.selectNodeContents(el);
  range.collapse(false);
  const sel = window.getSelection();
  sel.removeAllRanges();
  sel.addRange(range);
}

function initInput() {
  hiddenInput.innerText = placeholder;
  setCaretToEnd(hiddenInput);
}

async function loadWords() {
  const res = await fetch("words_en.txt");
  const text = await res.text();
  sampleWords = text.trim().split(/\s+/);
}

async function loadWordsIfNeeded() {
  if (sampleWords.length > 0) return;
  const res = await fetch("words_en.txt");
  const text = await res.text();
  sampleWords = text.trim().split(/\s+/);
}


async function initText() {
  textContainer.innerHTML = "";
  currentIndex = 0;

  if (gameMode === "words") {
    await loadWordsIfNeeded();
    const shuffled = sampleWords.slice().sort(() => Math.random() - 0.5);
    const selected = shuffled.slice(0, wordCount);
    sampleText = selected.join(" ");
  }

  const words = sampleText.split(" ");

  words.forEach((word, i) => {
    const groupSpan = document.createElement("span");
    groupSpan.classList.add("wordGroup");
    groupSpan.style.whiteSpace = "nowrap";

    for (let letter of word) {
      const letterSpan = document.createElement("span");
      letterSpan.classList.add("letter", "pending");
      letterSpan.textContent = letter;
      groupSpan.appendChild(letterSpan);
    }

    if (i < words.length - 1) {
      const spaceSpan = document.createElement("span");
      spaceSpan.classList.add("letter", "pending", "space");
      spaceSpan.textContent = " ";
      groupSpan.appendChild(spaceSpan);
    }

    textContainer.appendChild(groupSpan);
  });

  updateCursor();
  initInput();
}



let lastValidTop = null;

function updateCursor() {
  document.querySelectorAll(".letter").forEach(el => el.classList.remove("active"));
  const letters = document.querySelectorAll(".letter");
  if (currentIndex < letters.length) {
    letters[currentIndex].classList.add("active");
  }
}


function focusInput() {
  // –£–ë–ò–†–ê–ï–ú setTimeout
  hiddenInput.focus({ preventScroll: true });
  setCaretToEnd(hiddenInput);
}


function blurInput() {
  document.body.classList.remove('noscroll');
}

function formatTime(seconds) {
  if (seconds < 60) {
    return seconds.toString(); // –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ, –µ—Å–ª–∏ –º–µ–Ω—å—à–µ 60
  }
  const mins = Math.floor(seconds / 60);
  const secs = seconds % 60;
  return `${String(mins).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;
}



function startTimer() {
  document.getElementById("modePanel")?.classList.add("hidden");
  startTime = Date.now();
  timerInterval = setInterval(() => {
    remainingTime--;
    timerDisplay.textContent = formatTime(remainingTime);
    if (remainingTime <= 0) {
      finishGame("timeout");
    }
  }, 1000);
}

function handleKey(char) {
  const letters = document.querySelectorAll(".letter");
  if (currentIndex >= letters.length) return;

  if (!timerStarted) {
    timerStarted = true;
    startTimer();
    document.body.classList.add("typing-started");
  }

  const current = letters[currentIndex];
  if (char === current.textContent) {
    current.classList.remove("pending", "incorrect");
    current.classList.add("correct");
  } else {
    current.classList.remove("pending", "correct");
    current.classList.add("incorrect");
    incorrectCount++;
  }

  currentIndex++;
  updateCursor();

  if (currentIndex >= letters.length) {
    finishGame("completed");
  }

  if (gameMode === "words") {
    const letters = document.querySelectorAll(".letter");
  
    let currentWordIndex = 0;
  
    // –ï—Å–ª–∏ –º—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—Å—Ç–∞ ‚Äî –∑–Ω–∞—á–∏—Ç –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ
    if (currentIndex >= letters.length) {
      currentWordIndex = wordCount;
    } else {
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–µ–ª–æ–≤ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
      for (let i = 0; i < currentIndex; i++) {
        if (letters[i].textContent === " ") currentWordIndex++;
      }
      currentWordIndex++; // –¥–æ–±–∞–≤–ª—è–µ–º +1 –∫ —Å—á—ë—Ç—á–∏–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞
    }
  
    const wordCounterEl = document.getElementById("wordCounter");
    if (wordCounterEl) {
      wordCounterEl.textContent = `${Math.min(currentWordIndex, wordCount)} / ${wordCount}`;
    }
  
    if (currentWordIndex >= wordCount) {
      finishGame("completed");
    }
  }
  
  
  
}

function handleBackspace() {
  if (currentIndex === 0) return;
  currentIndex--;
  const letters = document.querySelectorAll(".letter");
  letters[currentIndex].classList.remove("correct", "incorrect");
  letters[currentIndex].classList.add("pending");
  updateCursor();
}

hiddenInput.addEventListener("beforeinput", (e) => {
  if (gameEnded) {
    e.preventDefault();
    return;
  }
  if (e.inputType === "deleteContentBackward") {
    handleBackspace();
  } else if (e.data) {
    handleKey(e.data);
  }
  hiddenInput.innerText = placeholder;
  setCaretToEnd(hiddenInput);
});

hiddenInput.addEventListener("keydown", (e) => {
  if (gameEnded) {
    e.preventDefault();
    return;
  }
  if (e.key === "Backspace") {
    e.preventDefault();
    handleBackspace();
  } else if (e.key.length === 1) {
    e.preventDefault();
    handleKey(e.key);
  }
  hiddenInput.innerText = placeholder;
  setCaretToEnd(hiddenInput);
});

function finishGame(reason) {
  endTime = Date.now();
  document.getElementById("modePanel")?.classList.remove("hidden");

  clearInterval(timerInterval);
  gameEnded = true;

  const totalTimeSec = (endTime - startTime) / 1000;
  const letters = document.querySelectorAll(".letter");
  const typedChars = currentIndex;

  let correctChars = 0;
let incorrectChars = 0;
letters.forEach(letter => {
  if (letter.classList.contains("correct")) correctChars++;
  if (letter.classList.contains("incorrect")) incorrectChars++;
});

  const accuracy = typedChars > 0 ? (correctChars / typedChars) * 100 : 0;
  const wpm = typedChars > 0 ? (typedChars / 5) / (totalTimeSec / 60) : 0;

  document.getElementById("wpmValue").textContent = "WPM: " + wpm.toFixed(1);
  document.getElementById("accValue").textContent = "Accuracy: " + accuracy.toFixed(1) + "%";
  document.getElementById("accValue").title =
  `${accuracy.toFixed(2)}%\n${correctChars} correct\n${incorrectChars} incorrect`;

  document.getElementById("errorValue").textContent = "Errors: " + incorrectCount;
  document.getElementById("timeValue").textContent = "Time: " + totalTimeSec.toFixed(1) + "s";

  const symbolEl = document.getElementById("resultSymbol");
  symbolEl.textContent = reason === "completed" ? "‚úÖ" : "‚ùå";

  const panel = document.getElementById("resultPanel");
  const content = document.getElementById("resultContent");

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
  panel.classList.remove("hide");
  content.classList.remove("hide");
  panel.classList.add("show");
  content.classList.add("show");
  panel.style.display = "flex";

  // üîê –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û–ï –ó–ê–ö–†–´–¢–ò–ï –ö–õ–ê–í–ò–ê–¢–£–†–´
  requestAnimationFrame(() => {
    setTimeout(() => {
      hiddenInput.blur();
      window.getSelection()?.removeAllRanges();
    }, 50); // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ ‚Äî –¥–∞—ë—Ç —Å—Ä–∞–±–æ—Ç–∞—Ç—å panel.style.display
  });
}






async function resetGame(shouldSetCaret = true) {
  document.getElementById("modePanel")?.classList.remove("hidden");

  gameEnded = false;
  timerStarted = false;
  clearInterval(timerInterval);
  currentIndex = 0;
  incorrectCount = 0;
  lastValidTop = null;
  remainingTime = defaultTime;
  document.body.classList.remove("typing-started");

  await initText(); // üí° –≤—Å—ë —Å–æ–∑–¥–∞—ë—Ç—Å—è –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ

  if (shouldSetCaret) {
    initInput();
  } else {
    hiddenInput.blur();
    window.getSelection()?.removeAllRanges();
  }
}




// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
document.getElementById("closeResultBtn").addEventListener("click", () => {
  const panel = document.getElementById("resultPanel");
  const content = document.getElementById("resultContent");

  // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å—ã –ø–æ–∫–∞–∑–∞
  panel.classList.remove("show");
  content.classList.remove("show");

  // –°–∫—Ä—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ —Å–ª–æ–≤, –µ—Å–ª–∏ —Ä–µ–∂–∏–º "words"
  const wordCounterEl = document.getElementById("wordCounter");
if (gameMode === "words" && wordCounterEl) {
  wordCounterEl.textContent = `0 / ${wordCount}`;
}
  // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–∫—Ä—ã—Ç–∏—è
  panel.classList.add("hide");
  content.classList.add("hide");

  // –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
  closeKeyboard();

  // –ß–µ—Ä–µ–∑ 300 –º—Å (–ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏) ‚Äî —Å–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
  setTimeout(() => {
    panel.style.display = "none";
    panel.classList.remove("hide");
    content.classList.remove("hide");

    remainingTime = defaultTime;
    timerDisplay.textContent = formatTime(remainingTime);
    resetGame(true);      // ‚úÖ —Å–±—Ä–æ—Å –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—É—Ä—Å–æ—Ä–∞
    focusInput();         // ‚úÖ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
  }, 300);
});




function renderModeOptions() {
  const container = document.getElementById("modeOptions");
  container.innerHTML = "";

  let options = [];
  if (gameMode === "time") {
    options = timeOptions;
  } else if (gameMode === "words") {
    options = wordOptions;
  } else if (gameMode === "quote") {
    options = [
      "\"To be, or not to be?\"",
      "'Hello, world!'",
      "What is your name?"
    ];
  }

  options.forEach((val, index) => {
    const btn = document.createElement("button");
    btn.textContent = val;
    btn.classList.toggle("active", val === defaultTime || val === wordCount);

    btn.onclick = () => {
      document.querySelectorAll("#modeOptions button").forEach(b => b.classList.remove("active"));
      btn.classList.add("active");
    
      if (gameMode === "words") {
        wordCount = val;
      
        const wordCounterEl = document.getElementById("wordCounter");
        if (wordCounterEl) {
          wordCounterEl.textContent = `0 / ${val}`;
          wordCounterEl.style.display = "block";
        }
      }

      if (gameMode === "time") {
        defaultTime = val;
        remainingTime = val;
        timerDisplay.textContent = formatTime(val);;
      } else if (gameMode === "words") {
        wordCount = val;
      }
    
      resetGame(true); // ‚¨ÖÔ∏è –°–±—Ä–æ—Å –∏–≥—Ä—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é (–æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç, –∫—É—Ä—Å–æ—Ä, —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
    };
    
    container.appendChild(btn);
  });
}

function switchGameMode(mode) {
  gameMode = mode;
  document.querySelectorAll("#gameModes button").forEach(btn => {
    btn.classList.toggle("active", btn.dataset.mode === mode);
  });

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–ª–∏ –ø—Ä—è—á–µ–º —Ç–∞–π–º–µ—Ä
  timerDisplay.style.display = (mode === "time") ? "block" : "none";

  // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø—Ü–∏–∏
  renderModeOptions();

  // ‚úÖ –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –¥–ª—è words
  let wordCounterEl = document.getElementById("wordCounter");
  if (!wordCounterEl) {
    wordCounterEl = document.createElement("div");
    wordCounterEl.id = "wordCounter";
    wordCounterEl.style.marginBottom = "10px";
    wordCounterEl.style.color = "#FFD700";
    wordCounterEl.style.fontSize = "1.5rem";
    timerDisplay.insertAdjacentElement("afterend", wordCounterEl);
  }

  if (mode === "words") {
    wordCounterEl.style.display = "block";
    wordCounterEl.textContent = `0 / ${wordCount}`;
  } else {
    wordCounterEl.style.display = "none";
  }

  resetGame(false); // —Å–±—Ä–æ—Å –±–µ–∑ —Ñ–æ–∫—É—Å–∞
}



function openKeyboard() {
  hiddenInput.focus({ preventScroll: true });
  setCaretToEnd(hiddenInput);
}

function closeKeyboard() {
  hiddenInput.blur();
  window.getSelection()?.removeAllRanges(); // –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —É–±–∏—Ä–∞–µ—Ç –∫—É—Ä—Å–æ—Ä
  console.log("Keyboard closed");
}

// HOME ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
document.getElementById("homeBtn").addEventListener("click", () => {
  document.getElementById("modePanel").classList.remove("hidden");
  document.getElementById("resultPanel").style.display = "none";

  // ‚¨áÔ∏è –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ –∏ —Ä–µ–∂–∏–º–∞
  // defaultTime = defaultTime; // –∏–ª–∏ 30, –∏–ª–∏ —á—Ç–æ —É–≥–æ–¥–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  remainingTime = defaultTime;
  timerDisplay.textContent = formatTime(defaultTime);

  resetGame(false); // –±–µ–∑ –∞–≤—Ç–æ—Ñ–æ–∫—É—Å–∞
  closeKeyboard();
});


// RESET ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º
document.getElementById("resetBtn").addEventListener("click", () => {
  // –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å sampleText –∑–¥–µ—Å—å, –µ—Å–ª–∏ —É —Ç–µ–±—è –º–∞—Å—Å–∏–≤
  // sampleText = getRandomText();

  remainingTime = defaultTime;
  timerDisplay.textContent = formatTime(defaultTime);
  resetGame(true);
  focusInput(); // –æ—Ç–∫—Ä–æ–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
});


document.querySelectorAll("#gameModes button").forEach(btn => {
  btn.onclick = () => switchGameMode(btn.dataset.mode);
});

renderModeOptions();
initText();

textContainer.addEventListener("click", () => {
  // –ü—Ä–æ—Å—Ç–æ —Ñ–æ–∫—É—Å–∏—Ä—É–µ–º, –Ω–∏—á–µ–≥–æ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
  focusInput();
});


textContainer.addEventListener("touchstart", (e) => {
  focusInput();
});

hiddenInput.addEventListener("blur", blurInput);
focusInput();


window.addEventListener("resize", () => {
  updateCursor();
});

window.addEventListener("scroll", () => {
  updateCursor();
});

window.visualViewport?.addEventListener("resize", () => {
  updateCursor();
});

loadWords();
